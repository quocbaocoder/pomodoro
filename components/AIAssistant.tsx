import React, { useState, useRef, useEffect } from 'react';
import { askAI } from '../services/geminiService';
import { SparklesIcon } from './icons/SparklesIcon';
import { Message, AIMode } from '../types';

interface AIAssistantProps {
    onClose: () => void;
    onAddTask: (taskDetails: { subject: string; task: string; deadline: string }) => void;
    onDeleteTask: (taskDescription: string) => string | null;
    onCompleteTask: (taskDescription: string) => string | null;
    taskChatHistory: Message[];
    setTaskChatHistory: React.Dispatch<React.SetStateAction<Message[]>>;
    studyChatHistory: Message[];
    setStudyChatHistory: React.Dispatch<React.SetStateAction<Message[]>>;
}

const AIAssistant: React.FC<AIAssistantProps> = ({ 
    onClose, 
    onAddTask, 
    onDeleteTask, 
    onCompleteTask, 
    taskChatHistory, 
    setTaskChatHistory,
    studyChatHistory,
    setStudyChatHistory
}) => {
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [mode, setMode] = useState<AIMode>('study');
  const chatEndRef = useRef<HTMLDivElement>(null);

  const chatHistory = mode === 'tasks' ? taskChatHistory : studyChatHistory;
  const setChatHistory = mode === 'tasks' ? setTaskChatHistory : setStudyChatHistory;

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatHistory]);

  const handleSubmit = async (e: React.FormEvent, prompt?: string) => {
    e.preventDefault();
    const currentInput = prompt || input;
    if (!currentInput.trim() || isLoading) return;

    const userMessage: Message = { role: 'user', text: currentInput };
    const historyForAPI = chatHistory.map(msg => ({ role: msg.role, parts: [{text: msg.text}] }));
    
    setChatHistory(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    const aiResponse = await askAI(currentInput, historyForAPI, mode);
    
    let responseMessage: Message | null = null;

    if (aiResponse.functionCall && mode === 'tasks') {
        const { name, args } = aiResponse.functionCall;

        if (name === 'addHomework') {
            const { subject, task, deadline } = args;
            if (subject && task && deadline && /^\d{4}-\d{2}-\d{2}$/.test(deadline)) {
                onAddTask({ subject, task, deadline });
                responseMessage = { 
                    role: 'model', 
                    text: `‚úÖ ƒê√£ th√™m nhi·ªám v·ª•!\n- M√¥n h·ªçc: ${subject}\n- Nhi·ªám v·ª•: ${task}\n- H·∫°n ch√≥t: ${new Date(deadline).toLocaleDateString('vi-VN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC'})}` 
                };
            } else {
                 responseMessage = { role: 'model', text: "T√¥i kh√¥ng th·ªÉ th√™m nhi·ªám v·ª• v√¨ thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng ng√†y kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i v√† ƒë·∫£m b·∫£o h·∫°n ch√≥t r√µ r√†ng." };
            }
        } else if (name === 'deleteHomework') {
            const { task } = args;
            if (task) {
                const deletedTaskName = onDeleteTask(task);
                if (deletedTaskName) {
                    responseMessage = { role: 'model', text: `üóëÔ∏è ƒê√£ x√≥a nhi·ªám v·ª•: "${deletedTaskName}"` };
                } else {
                    responseMessage = { role: 'model', text: `T√¥i kh√¥ng t√¨m th·∫•y nhi·ªám v·ª• n√†o kh·ªõp v·ªõi "${task}" ƒë·ªÉ x√≥a. Vui l√≤ng c·ª• th·ªÉ h∆°n ho·∫∑c ki·ªÉm tra danh s√°ch nhi·ªám v·ª• c·ªßa b·∫°n.` };
                }
            } else {
                responseMessage = { role: 'model', text: "Vui l√≤ng cho t√¥i bi·∫øt b·∫°n mu·ªën x√≥a nhi·ªám v·ª• n√†o." };
            }
        } else if (name === 'completeHomework') {
            const { task } = args;
            if (task) {
                const completedTaskName = onCompleteTask(task);
                if (completedTaskName) {
                    responseMessage = { role: 'model', text: `üéâ L√†m t·ªët l·∫Øm! ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh nhi·ªám v·ª•: "${completedTaskName}"` };
                } else {
                    responseMessage = { role: 'model', text: `T√¥i kh√¥ng t√¨m th·∫•y nhi·ªám v·ª• n√†o ƒëang ho·∫°t ƒë·ªông kh·ªõp v·ªõi "${task}" ƒë·ªÉ ho√†n th√†nh. Vui l√≤ng c·ª• th·ªÉ h∆°n ho·∫∑c ki·ªÉm tra danh s√°ch nhi·ªám v·ª• c·ªßa b·∫°n.` };
                }
            } else {
                responseMessage = { role: 'model', text: "Vui l√≤ng cho t√¥i bi·∫øt b·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• n√†o." };
            }
        }
    } else if (aiResponse.text) {
        responseMessage = { role: 'model', text: aiResponse.text };
    }
    
    if (responseMessage) {
      setChatHistory(prev => [...prev, responseMessage!]);
    }

    setIsLoading(false);
  };
  
  return (
    <div className="flex flex-col h-full max-h-[700px] w-full max-w-2xl bg-slate-800/80 backdrop-blur-xl border border-white/10 rounded-3xl shadow-lg shadow-black/30">
      <div className="p-4 border-b border-slate-700 flex items-center justify-between">
        <div className="flex items-center space-x-2">
            <SparklesIcon className="text-cyan-400" />
            <h1 className="text-xl font-bold text-cyan-400">Tr·ª£ l√Ω AI</h1>
        </div>
        <button onClick={onClose} className="p-1 rounded-full text-slate-400 hover:bg-slate-700 transition-colors" aria-label="ƒê√≥ng Tr·ª£ l√Ω AI">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
        </button>
      </div>

      <div className="p-2">
          <div className="flex p-1 bg-slate-700 rounded-lg">
              <button onClick={() => setMode('study')} className={`w-full p-2 rounded-md transition-colors text-sm font-semibold ${mode === 'study' ? 'bg-cyan-600 text-white' : 'hover:bg-slate-600'}`}>H·ªçc t·∫≠p</button>
              <button onClick={() => setMode('tasks')} className={`w-full p-2 rounded-md transition-colors text-sm font-semibold ${mode === 'tasks' ? 'bg-cyan-600 text-white' : 'hover:bg-slate-600'}`}>Nhi·ªám v·ª•</button>
          </div>
      </div>

      <div className="flex-grow p-4 overflow-y-auto space-y-4">
        {chatHistory.length === 0 && (
          mode === 'study' ? (
            <div className="flex flex-col items-center justify-center h-full text-slate-400 text-center">
              <SparklesIcon className="w-16 h-16 mb-4"/>
              <p className="text-lg">Ch√†o b·∫°n! T√¥i l√† b·∫°n h·ªçc AI c·ªßa b·∫°n.</p>
              <p className="text-sm mb-6">H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ c√°c m√¥n h·ªçc c·ªßa b·∫°n!</p>
              <div className="flex flex-wrap justify-center gap-2">
                  <button onClick={(e) => handleSubmit(e, "Gi·∫£i th√≠ch quang h·ª£p l√† g√¨?")} className="bg-slate-700/80 hover:bg-slate-600/80 transition-colors text-sm px-3 py-2 rounded-lg">Gi·∫£i th√≠ch quang h·ª£p</button>
                  <button onClick={(e) => handleSubmit(e, "T√≥m t·∫Øt c√°c nguy√™n nh√¢n ch√≠nh c·ªßa Chi·∫øn tranh th·∫ø gi·ªõi th·ª© nh·∫•t.")} className="bg-slate-700/80 hover:bg-slate-600/80 transition-colors text-sm px-3 py-2 rounded-lg">T√≥m t·∫Øt l·ªãch s·ª≠</button>
                  <button onClick={(e) => handleSubmit(e, "S·ª± kh√°c bi·ªát gi·ªØa ƒë·ªông l∆∞·ª£ng v√† qu√°n t√≠nh l√† g√¨?")} className="bg-slate-700/80 hover:bg-slate-600/80 transition-colors text-sm px-3 py-2 rounded-lg">So s√°nh c√°c kh√°i ni·ªám</button>
              </div>
            </div>
          ) : (
             <div className="flex flex-col items-center justify-center h-full text-slate-400 text-center">
                <SparklesIcon className="w-16 h-16 mb-4"/>
                <p className="text-lg">C·∫ßn qu·∫£n l√Ω m·ªôt nhi·ªám v·ª•?</p>
                <p className="text-sm mb-6">v√≠ d·ª•: "ƒê√°nh d·∫•u b√†i lu·∫≠n l·ªãch s·ª≠ c·ªßa t√¥i l√† ƒë√£ ho√†n th√†nh."</p>
                <div className="flex flex-wrap justify-center gap-2">
                    <button onClick={(e) => handleSubmit(e, "Th√™m m·ªôt nhi·ªám v·ª• m·ªõi")} className="bg-slate-700/80 hover:bg-slate-600/80 transition-colors text-sm px-3 py-2 rounded-lg">Th√™m m·ªôt nhi·ªám v·ª• m·ªõi</button>
                    <button onClick={() => setInput("T√¥i ƒë√£ ho√†n th√†nh b√†i t·∫≠p v·ªÅ...")} className="bg-slate-700/80 hover:bg-slate-600/80 transition-colors text-sm px-3 py-2 rounded-lg">Ho√†n th√†nh m·ªôt nhi·ªám v·ª•</button>
                    <button onClick={() => setInput("X√≥a nhi·ªám v·ª• c·ªßa t√¥i v·ªÅ...")} className="bg-slate-700/80 hover:bg-slate-600/80 transition-colors text-sm px-3 py-2 rounded-lg">X√≥a m·ªôt nhi·ªám v·ª•</button>
                </div>
              </div>
          )
        )}
        {chatHistory.map((msg, index) => (
          <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-2xl ${msg.role === 'user' ? 'bg-cyan-600 text-white rounded-br-none' : 'bg-slate-700 text-slate-200 rounded-bl-none'}`}>
              <p className="whitespace-pre-wrap">{msg.text}</p>
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start">
            <div className="max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-2xl bg-slate-700 text-slate-200 rounded-bl-none flex items-center space-x-2">
               <div className="w-2 h-2 bg-slate-400 rounded-full animate-pulse delay-75"></div>
               <div className="w-2 h-2 bg-slate-400 rounded-full animate-pulse delay-150"></div>
               <div className="w-2 h-2 bg-slate-400 rounded-full animate-pulse delay-300"></div>
            </div>
          </div>
        )}
        <div ref={chatEndRef} />
      </div>

      <form onSubmit={handleSubmit} className="p-4 border-t border-slate-700">
        <div className="flex items-center bg-slate-700 rounded-lg">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="ƒê·∫∑t m·ªôt c√¢u h·ªèi..."
            className="w-full bg-transparent p-3 focus:outline-none"
            disabled={isLoading}
          />
          <button type="submit" disabled={isLoading || !input.trim()} className="p-3 text-cyan-400 disabled:text-slate-500 hover:text-cyan-300 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m22 2-7 20-4-9-9-4Z"/><path d="M22 2 11 13"/></svg>
          </button>
        </div>
      </form>
    </div>
  );
};

export default AIAssistant;